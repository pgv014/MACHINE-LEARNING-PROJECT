#IMPORTING THE DEPENDENCIES
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# LOADING THE DATASET TO A PANDAS DATAFRAME
credit_card_data = pd.read_csv('/content/credit_data.csv')

# FIRST 5 ROWS OF A DATASET
credit_card_data.head()
credit_card_data.tail()

# DATASET INFORMATIONS
credit_card_data.info()

# CHECKING THE NUMBER OF MISSING VALUES IN EACH COLUMN
credit_card_data.isnull().sum()

# DISTRIBUTION OF LEGIT TRANSACTIONS & FRAUDULENT TRANSACTIONS
credit_card_data['Class'].value_counts()

# SEPERATING THE DATA FOR ANALYSIS
legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]
print(legit.shape)
print(fraud.shape)
# STATISTICAL MEASURE OF THE DATA
legit.Amount.describe()
fraud.Amount.describe()

# COMPARE THE VALUES FOR BOTH TRANSACTIONS
credit_card_data.groupby('Class').mean()

UNDER SAMPLING
Build a sample dataset containing similar distribution of normal transactions and Fraudulent Transactions
NUMBER OF FRAUDULENT TRANSACTIONSïƒ 492
legit_sample = legit.sample(n=492)

#CONCATENATING TWO DATA FRAMES
new_dataset = pd.concat([legit_sample, fraud], axis=0)
new_dataset.head()
new_dataset.tail()
new_dataset['Class'].value_counts()
new_dataset.groupby('Class').mean()

#SPLITTING THE DATA INTO FEATURES & TARGETS 
X = new_dataset.drop(columns='Class', axis=1)
Y = new_dataset['Class']
print(X)
print(Y)

#SPLIT THE DATA INTO TRAINING DATA & TESTING DATA 
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)
print(X.shape, X_train.shape, X_test.shape)
#MODEL TRAINING
LOGISTIC REGRESSION
model = LogisticRegression()

# TRAINING THE LOGISTIC REGRESSION MODEL WITH WITH TRAINING DATA 
model.fit(X_train, Y_train)

#MODEL EVALUATION
ACCURACY SCORE
# ACCURACY ON TRAINING DATA
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on Training data : ', training_data_accuracy)
# ACCURACY ON TEST DATA
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)










